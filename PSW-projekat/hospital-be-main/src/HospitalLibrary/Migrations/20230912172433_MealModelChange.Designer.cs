// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20230912172433_MealModelChange")]
    partial class MealModelChange
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DoctorDoctorsCouncil", b =>
                {
                    b.Property<int>("CouncilsId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorsId")
                        .HasColumnType("int");

                    b.HasKey("CouncilsId", "DoctorsId");

                    b.HasIndex("DoctorsId");

                    b.ToTable("DoctorDoctorsCouncil");
                });

            modelBuilder.Entity("HospitalLibrary.Core.AggregatDoctor.DoctorExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.Property<DateTime>("endTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorExaminations");
                });

            modelBuilder.Entity("HospitalLibrary.Core.AggregatDoctor.DomainEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AggregateId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phase")
                        .HasColumnType("int");

                    b.Property<DateTime>("selectionTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AggregateId");

                    b.ToTable("DoctorExaminationEvents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DomainEvent");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Aggregate.DomainEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AggregateId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phase")
                        .HasColumnType("int");

                    b.Property<string>("selectedItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("selectionTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AggregateId");

                    b.ToTable("AppointmentSchedulingEvents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DomainEvent");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Aggregate.ScheduleAppointmentByPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.Property<DateTime>("endTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("ScheduleAppointmentByPatients");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CancelationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BedState")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Blood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Bloods");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.DoctorBloodConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BloodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BloodId");

                    b.HasIndex("DoctorId");

                    b.ToTable("BloodConsumptions");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.DoctorsCouncil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DoctorsCouncils");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Examination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Report")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAnonimous")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.GymWorkout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("GymWorkouts");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.HistoryTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("HistoryTreatments");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfMeal")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("MealType")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.MealQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("MealType")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MealQuestions");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("RoomId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationFor")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<double>("HealthScore")
                        .HasColumnType("float");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PersonId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.PatientAllergies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PatientAllergies");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.PatientHealthInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BloodPressure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("HeartRate")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<DateTime>("SelectedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientHealthInformations");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExaminationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("RoomType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ExaminationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Therapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BloodId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityBlood")
                        .HasColumnType("int");

                    b.Property<int>("QuantitytMedicine")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BloodId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Therapys");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdmission")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDischarge")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForAdmission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForDischarge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("TherapyId")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentState")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TherapyId");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.WorkingDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("WorkingDays");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("HospitalLibrary.Core.AggregatDoctor.Events.BackToPrescriptionsSelection", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.AggregatDoctor.DomainEvent");

                    b.HasDiscriminator().HasValue("BackToPrescriptionsSelection");
                });

            modelBuilder.Entity("HospitalLibrary.Core.AggregatDoctor.Events.BackToReportWritten", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.AggregatDoctor.DomainEvent");

                    b.HasDiscriminator().HasValue("BackToReportWritten");
                });

            modelBuilder.Entity("HospitalLibrary.Core.AggregatDoctor.Events.BackToSymptomsSelection", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.AggregatDoctor.DomainEvent");

                    b.HasDiscriminator().HasValue("BackToSymptomsSelection");
                });

            modelBuilder.Entity("HospitalLibrary.Core.AggregatDoctor.Events.DoctorSelectedPrescriptions", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.AggregatDoctor.DomainEvent");

                    b.Property<string>("Prescriptions")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("DoctorSelectedPrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Core.AggregatDoctor.Events.DoctorSelectedSymptoms", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.AggregatDoctor.DomainEvent");

                    b.Property<string>("Symptoms")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("DoctorSelectedSymptoms");
                });

            modelBuilder.Entity("HospitalLibrary.Core.AggregatDoctor.Events.DoctorWriteReport", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.AggregatDoctor.DomainEvent");

                    b.Property<string>("Report")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("DoctorWriteReport");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Aggregate.Events.BackToAppointentTimeSelection", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Model.Aggregate.DomainEvent");

                    b.HasDiscriminator().HasValue("BackToAppointentTimeSelection");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Aggregate.Events.BackToAppointmentDateSelection", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Model.Aggregate.DomainEvent");

                    b.HasDiscriminator().HasValue("BackToAppointmentDateSelection");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Aggregate.Events.BackToDoctorSelection", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Model.Aggregate.DomainEvent");

                    b.HasDiscriminator().HasValue("BackToDoctorSelection");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Aggregate.Events.BackToSpecializationSelection", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Model.Aggregate.DomainEvent");

                    b.HasDiscriminator().HasValue("BackToSpecializationSelection");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Aggregate.Events.PatientSelectedAppointmentDate", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Model.Aggregate.DomainEvent");

                    b.HasDiscriminator().HasValue("PatientSelectedAppointmentDate");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Aggregate.Events.PatientSelectedAppointmentTime", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Model.Aggregate.DomainEvent");

                    b.HasDiscriminator().HasValue("PatientSelectedAppointmentTime");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Aggregate.Events.PatientSelectedDoctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Model.Aggregate.DomainEvent");

                    b.HasDiscriminator().HasValue("PatientSelectedDoctor");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Aggregate.Events.PatientSelectedDoctorSpecialization", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Model.Aggregate.DomainEvent");

                    b.HasDiscriminator().HasValue("PatientSelectedDoctorSpecialization");
                });

            modelBuilder.Entity("DoctorDoctorsCouncil", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.DoctorsCouncil", null)
                        .WithMany()
                        .HasForeignKey("CouncilsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Core.AggregatDoctor.DoctorExamination", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Core.AggregatDoctor.DomainEvent", b =>
                {
                    b.HasOne("HospitalLibrary.Core.AggregatDoctor.DoctorExamination", "Aggregate")
                        .WithMany("Changes")
                        .HasForeignKey("AggregateId");

                    b.Navigation("Aggregate");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Aggregate.DomainEvent", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Aggregate.ScheduleAppointmentByPatient", "Aggregate")
                        .WithMany("Changes")
                        .HasForeignKey("AggregateId");

                    b.Navigation("Aggregate");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Aggregate.ScheduleAppointmentByPatient", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Bed", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("HospitalLibrary.Core.Model.Room", null)
                        .WithMany("Beds")
                        .HasForeignKey("RoomId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Blood", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Room", null)
                        .WithMany("Bloods")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.OwnsMany("HospitalLibrary.Core.Model.DoctorSchedule", "DoctorSchedules", b1 =>
                        {
                            b1.Property<int>("DoctorId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("Day")
                                .HasColumnType("int");

                            b1.HasKey("DoctorId", "Id");

                            b1.ToTable("DoctorSchedule");

                            b1.WithOwner()
                                .HasForeignKey("DoctorId");

                            b1.OwnsOne("HospitalLibrary.Core.Model.TimeRange", "Shift", b2 =>
                                {
                                    b2.Property<int>("DoctorScheduleDoctorId")
                                        .HasColumnType("int");

                                    b2.Property<int>("DoctorScheduleId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.HasKey("DoctorScheduleDoctorId", "DoctorScheduleId");

                                    b2.ToTable("DoctorSchedule");

                                    b2.WithOwner()
                                        .HasForeignKey("DoctorScheduleDoctorId", "DoctorScheduleId");

                                    b2.OwnsOne("HospitalLibrary.Core.Model.Time", "EndTime", b3 =>
                                        {
                                            b3.Property<int>("TimeRangeDoctorScheduleDoctorId")
                                                .HasColumnType("int");

                                            b3.Property<int>("TimeRangeDoctorScheduleId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<int>("Hour")
                                                .HasColumnType("int");

                                            b3.Property<int>("Minute")
                                                .HasColumnType("int");

                                            b3.HasKey("TimeRangeDoctorScheduleDoctorId", "TimeRangeDoctorScheduleId");

                                            b3.ToTable("DoctorSchedule");

                                            b3.WithOwner()
                                                .HasForeignKey("TimeRangeDoctorScheduleDoctorId", "TimeRangeDoctorScheduleId");
                                        });

                                    b2.OwnsOne("HospitalLibrary.Core.Model.Time", "StartTime", b3 =>
                                        {
                                            b3.Property<int>("TimeRangeDoctorScheduleDoctorId")
                                                .HasColumnType("int");

                                            b3.Property<int>("TimeRangeDoctorScheduleId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<int>("Hour")
                                                .HasColumnType("int");

                                            b3.Property<int>("Minute")
                                                .HasColumnType("int");

                                            b3.HasKey("TimeRangeDoctorScheduleDoctorId", "TimeRangeDoctorScheduleId");

                                            b3.ToTable("DoctorSchedule");

                                            b3.WithOwner()
                                                .HasForeignKey("TimeRangeDoctorScheduleDoctorId", "TimeRangeDoctorScheduleId");
                                        });

                                    b2.Navigation("EndTime");

                                    b2.Navigation("StartTime");
                                });

                            b1.Navigation("Shift");
                        });

                    b.Navigation("DoctorSchedules");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.DoctorBloodConsumption", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Blood", "Blood")
                        .WithMany()
                        .HasForeignKey("BloodId");

                    b.HasOne("HospitalLibrary.Core.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Blood");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Examination", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.GymWorkout", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.OwnsMany("HospitalLibrary.Core.Model.Exercise", "Exercises", b1 =>
                        {
                            b1.Property<int>("GymWorkoutId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Reps")
                                .HasColumnType("int");

                            b1.Property<int>("Sets")
                                .HasColumnType("int");

                            b1.Property<double>("WeightLifted")
                                .HasColumnType("float");

                            b1.HasKey("GymWorkoutId", "Id");

                            b1.ToTable("Exercises");

                            b1.WithOwner()
                                .HasForeignKey("GymWorkoutId");
                        });

                    b.Navigation("Exercises");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Meal", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.OwnsMany("HospitalLibrary.Core.Model.MealAnswer", "Answers", b1 =>
                        {
                            b1.Property<int>("MealId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<float>("Answer")
                                .HasColumnType("real");

                            b1.Property<bool>("Deleted")
                                .HasColumnType("bit");

                            b1.Property<int?>("MealQuestionId")
                                .HasColumnType("int");

                            b1.HasKey("MealId", "Id");

                            b1.HasIndex("MealQuestionId");

                            b1.ToTable("MealAnswers");

                            b1.WithOwner()
                                .HasForeignKey("MealId");

                            b1.HasOne("HospitalLibrary.Core.Model.MealQuestion", "MealQuestion")
                                .WithMany()
                                .HasForeignKey("MealQuestionId");

                            b1.Navigation("MealQuestion");
                        });

                    b.Navigation("Answers");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Medicine", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Prescription", null)
                        .WithMany("Medicines")
                        .HasForeignKey("PrescriptionId");

                    b.HasOne("HospitalLibrary.Core.Model.Room", null)
                        .WithMany("Medicines")
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId");

                    b.HasOne("HospitalLibrary.Core.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.Navigation("Doctor");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.PatientHealthInformation", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Person", b =>
                {
                    b.OwnsOne("HospitalLibrary.Core.Model.Address", "Address", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Number")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Township")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonId");

                            b1.ToTable("Persons");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.OwnsOne("HospitalLibrary.Core.Model.Email", "Email", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Adress")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonId");

                            b1.ToTable("Persons");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.OwnsOne("HospitalLibrary.Core.Model.Jmbg", "Jmbg", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonId");

                            b1.ToTable("Persons");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Email");

                    b.Navigation("Jmbg");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Prescription", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Examination", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("ExaminationId");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.OwnsOne("HospitalLibrary.Core.Model.RoomFloor", "Floor", b1 =>
                        {
                            b1.Property<int>("RoomId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("Floor")
                                .HasColumnType("int");

                            b1.HasKey("RoomId");

                            b1.ToTable("Rooms");

                            b1.WithOwner()
                                .HasForeignKey("RoomId");
                        });

                    b.OwnsOne("HospitalLibrary.Core.Model.RoomName", "Number", b1 =>
                        {
                            b1.Property<int>("RoomId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RoomId");

                            b1.ToTable("Rooms");

                            b1.WithOwner()
                                .HasForeignKey("RoomId");
                        });

                    b.Navigation("Floor");

                    b.Navigation("Number");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Symptom", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Examination", null)
                        .WithMany("Symptoms")
                        .HasForeignKey("ExaminationId");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Therapy", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Blood", "Blood")
                        .WithMany()
                        .HasForeignKey("BloodId");

                    b.HasOne("HospitalLibrary.Core.Model.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");

                    b.Navigation("Blood");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Treatment", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("HospitalLibrary.Core.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("HospitalLibrary.Core.Model.Therapy", "Therapy")
                        .WithMany()
                        .HasForeignKey("TherapyId");

                    b.Navigation("Patient");

                    b.Navigation("Room");

                    b.Navigation("Therapy");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.WorkingDay", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Workout", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.AggregatDoctor.DoctorExamination", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Aggregate.ScheduleAppointmentByPatient", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Doctor", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Examination", b =>
                {
                    b.Navigation("Prescriptions");

                    b.Navigation("Symptoms");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Prescription", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Bloods");

                    b.Navigation("Medicines");
                });
#pragma warning restore 612, 618
        }
    }
}
