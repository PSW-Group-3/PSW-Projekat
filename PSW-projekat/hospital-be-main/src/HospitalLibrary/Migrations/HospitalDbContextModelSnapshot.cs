// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HospitalLibrary.Core.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Township")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Novi Sad",
                            Deleted = false,
                            Number = "1",
                            PostCode = "21000",
                            Street = "neka ulica1",
                            Township = "Novi Sad"
                        },
                        new
                        {
                            Id = 2,
                            City = "Novi Sad",
                            Deleted = false,
                            Number = "2",
                            PostCode = "21000",
                            Street = "neka ulica2",
                            Township = "Novi Sad"
                        },
                        new
                        {
                            Id = 3,
                            City = "Ledinci",
                            Deleted = false,
                            Number = "3",
                            PostCode = "21207",
                            Street = "neka ulica3",
                            Township = "Novi Sad"
                        },
                        new
                        {
                            Id = 4,
                            City = "Sremska Kamenica",
                            Deleted = false,
                            Number = "4",
                            PostCode = "21200",
                            Street = "neka ulica4",
                            Township = "Novi Sad"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Allergies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Name = "Polen"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Name = "Prasina"
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            Name = "Pas"
                        },
                        new
                        {
                            Id = 4,
                            Deleted = false,
                            Name = "Macka"
                        },
                        new
                        {
                            Id = 5,
                            Deleted = false,
                            Name = "Pcela"
                        },
                        new
                        {
                            Id = 6,
                            Deleted = false,
                            Name = "Ambrozija"
                        },
                        new
                        {
                            Id = 7,
                            Deleted = false,
                            Name = "Kikiriki"
                        },
                        new
                        {
                            Id = 8,
                            Deleted = false,
                            Name = "Gluten"
                        },
                        new
                        {
                            Id = 9,
                            Deleted = false,
                            Name = "Laktoza"
                        },
                        new
                        {
                            Id = 10,
                            Deleted = false,
                            Name = "Alergija10"
                        },
                        new
                        {
                            Id = 11,
                            Deleted = false,
                            Name = "Alergija11"
                        },
                        new
                        {
                            Id = 12,
                            Deleted = false,
                            Name = "Alergija12"
                        },
                        new
                        {
                            Id = 13,
                            Deleted = false,
                            Name = "Alergija13"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAnonimous")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            BloodType = 0,
                            Deleted = false
                        },
                        new
                        {
                            Id = 6,
                            BloodType = 1,
                            Deleted = false
                        },
                        new
                        {
                            Id = 7,
                            BloodType = 2,
                            Deleted = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.PatientAllergies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AllergyId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllergyId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAllergies");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2022, 11, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Deleted = false,
                            Email = "pera@gmail.com",
                            Gender = 0,
                            Name = "Pera",
                            Role = 2,
                            Surname = "Petrovic"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2022, 11, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Deleted = false,
                            Email = "nikola@gmail.com",
                            Gender = 0,
                            Name = "Nikola",
                            Role = 0,
                            Surname = "Nikolic"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(2022, 11, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Deleted = false,
                            Email = "marko@gmail.com",
                            Gender = 0,
                            Name = "Marko",
                            Role = 0,
                            Surname = "Markovic"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(2022, 11, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Deleted = false,
                            Email = "stefan@gmail.com",
                            Gender = 0,
                            Name = "Stefan",
                            Role = 0,
                            Surname = "Stefanovic"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(2022, 11, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Deleted = false,
                            Email = "pacijent1@gmail.com",
                            Gender = 0,
                            Name = "Pacijent1",
                            Role = 1,
                            Surname = "Nikolic"
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(2022, 11, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Deleted = false,
                            Email = "pacijent2@gmail.com",
                            Gender = 1,
                            Name = "Pacijent2",
                            Role = 1,
                            Surname = "Markovic"
                        },
                        new
                        {
                            Id = 7,
                            BirthDate = new DateTime(2022, 11, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Deleted = false,
                            Email = "pacijent3@gmail.com",
                            Gender = 2,
                            Name = "Pacijent3",
                            Role = 1,
                            Surname = "Stefanovic"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Floor = 1,
                            Number = "101A"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Floor = 2,
                            Number = "204"
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            Floor = 3,
                            Number = "305B"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.WorkingDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkingDays");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Person", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("HospitalLibrary.Core.Model.Person", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Person", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.PatientAllergies", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Allergy", "Allergy")
                        .WithMany()
                        .HasForeignKey("AllergyId");

                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Allergy");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Person", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.WorkingDay", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
